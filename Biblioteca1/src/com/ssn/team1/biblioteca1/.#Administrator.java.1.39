/*
 * Copyright (c) 2014 SSI Schaefer Noell GmbH
 *
 * $Header: /data/cvs/Scolarizare/Team1/Biblioteca1/src/com/ssn/team1/biblioteca1/Administrator.java,v 1.39 2014/04/11 06:08:00 cfiser Exp $
 */

package com.ssn.team1.biblioteca1;

import java.io.FileNotFoundException;
import java.io.Serializable;
import java.util.ArrayList;

/**
 * @author <a href="mailto:amarine@ssi-schaefer-noell.com">amarine</a>
 * @version $Revision: 1.39 $, $Date: 2014/04/11 06:08:00 $, $Author: cfiser $
 */

public class Administrator extends UtilizatorSimplu implements Serializable {

  private static final long serialVersionUID = 1L;
  private ArrayList<Exemplar> cartiImprumutate = new ArrayList<Exemplar>();

  public Administrator(String numeUtilizator, String parola) {
    super(numeUtilizator, parola);
  }

  public Administrator(String numeUtilizator, String parola, String nume, String numarTelefon) {
    super(numeUtilizator, parola, nume, numarTelefon);
  }

  public void adaugaCarte(String titlu, String numeAutor) {
    Biblioteca.getInstance().adaugaCarte(new Carte(titlu, numeAutor));
    SerializareDate.save(Biblioteca.getInstance().getFisierSerializare());
  }

  public void adaugaNumarExemplare(String titlu, String autor, String idExemplar) {
    Carte carte = Biblioteca.getInstance().getCarteDupaTitluSiAutor(titlu, autor);
    carte.adaugaNumarExemplare(idExemplar);
    SerializareDate.save(Biblioteca.getInstance().getFisierSerializare());
  }

  public void adaugaMembru(String numeUtilizator1, String parola1, String nume1, String numarTelefon, String adresa, String cnp) {
    if (Validator.existaCNP(cnp)) {
      System.out.println(" ! exista cnp");
      return;
    }
    Biblioteca.getInstance().adaugaMembru(new MembruInregistrat(numeUtilizator1, parola1, nume1, numarTelefon, adresa, cnp));
    System.out.println(" ! utilizatorul " + numeUtilizator1 + " a fost adaugat");
    SerializareDate.save(Biblioteca.getInstance().getFisierSerializare());
  }

  public void adaugaAdministrator(String numeUtilizator1, String parola1, String nume1, String numarTelefon) {
    Biblioteca.getInstance().adaugaAdministrator(new Administrator(numeUtilizator1, parola1, nume1, numarTelefon));
    SerializareDate.save(Biblioteca.getInstance().getFisierSerializare());
  }

  public void afiseazaStatisticiCartiNereturnateLaTimp() {
    Biblioteca.getInstance().afiseazaStatisticiCartiNereturnateLaTimp();
  }

  public void afiseazaIstoricOperatiuniTotale() {
    Biblioteca.getInstance().afiseazaIstoricOperatiuniTotale();
  }

  public void returneazaCarte(String username, String idExemplar) {
    UtilizatorSimplu membru = Biblioteca.getInstance().getMembruInregistratByNumeUtilizator(username);
    if (membru instanceof MembruInregistrat) {
      MembruInregistrat memInreg = (MembruInregistrat) membru;
      Exemplar exemplarImprumutat = memInreg.getExemplarImprumutatById(idExemplar);
      if (exemplarImprumutat == null) {
        System.out.println(" ! nu exista exemplarul");
        return;
      }
      memInreg.returneazaCarte(exemplarImprumutat);
    } else {
      Administrator admin = (Administrator) membru;
      Exemplar exemplarImprumutat = admin.getExemplarImprumutatById(idExemplar);
      if (exemplarImprumutat == null) {
        System.out.println(" ! nu exista exemplarul");
        return;
      }
      admin.returneazaCartePtAdmin(exemplarImprumutat);
    }
    SerializareDate.save(Biblioteca.getInstance().getFisierSerializare());
  }

  private void returneazaCartePtAdmin(Exemplar exemplarImprumutat) {
    exemplarImprumutat.returneaza();
    cartiImprumutate.remove(exemplarImprumutat);
  }

  public void imprumutaCarte(String username, String idUnic) {
    UtilizatorSimplu membru = Biblioteca.getInstance().getMembruInregistratByNumeUtilizator(username);
    Exemplar exemplarDeImprumutat = Biblioteca.getInstance().getExemplarById(idUnic);

    //    Carte carte = Biblioteca.getInstance().getCarteDupaTitluSiAutor(titluCarte, autorCarte);
    //    if (carte == null) {
    //      System.out.println(" ! nu exista cartea");
    //      return;
    //    }
    //    Exemplar exemplarDeImprumutat = carte.getExemplarDisponibil();
    if (exemplarDeImprumutat == null) {
      System.out.println(" ! nu exista exemplare disponibile");
      return;
    }
    if (membru instanceof MembruInregistrat) {
      if (membru.esteEligibilSaImprumute()) {
        ((MembruInregistrat) membru).imprumutaCarte(exemplarDeImprumutat);
      }
    } else {
      if (membru.esteEligibilSaImprumute()) {
        ((Administrator) membru).imprumutaCartePtAdmin(exemplarDeImprumutat);
      }

    }

    SerializareDate.save(Biblioteca.getInstance().getFisierSerializare());
  }

  private void imprumutaCartePtAdmin(Exemplar exemplarImprumutat) {
    Imprumut imp = new Imprumut(Biblioteca.getInstance().getExpireDate());
    exemplarImprumutat.imprumuta(imp);
    cartiImprumutate.add(exemplarImprumutat);
    Biblioteca.getInstance().addImprumut(this, imp);
    System.out.println(" ! Carte imprumutata cu succes");
  }

  public void aprobaSolicitare(MembruNeinregistrat membruNeinregistrat) {
    if (!Validator.existaUsername(membruNeinregistrat.getNumeUtilizator())) {
      if (Validator.esteCnpValid(membruNeinregistrat.getCnp())) {
        Biblioteca.getInstance().aprobaSolicitare(membruNeinregistrat);
      } else {
        System.out.println(" ! cnp existent");
        refuzaSolicitare(membruNeinregistrat);
      }
    } else {
      System.out.println(" ! username existent");
      refuzaSolicitare(membruNeinregistrat);
    }
    SerializareDate.save(Biblioteca.getInstance().getFisierSerializare());
  }

  @Override
  public void meniu() {
    MeniuAdministrator.meniu();
  }

  public ArrayList<Carte> getCartiDupaTitlu(String titlu) {
    return Biblioteca.getInstance().getCartiDupaTitlu(titlu);
  }

  public ArrayList<Carte> getCartiDupaAutor(String autor) {
    return Biblioteca.getInstance().getCartiDupaAutor(autor);
  }

  public void afiseazaInformatiiDespreMembru(String numeUtilizator1) {
    UtilizatorSimplu membruInregistrat = Biblioteca.getInstance().getMembruInregistratByNumeUtilizator(numeUtilizator1);
    if (membruInregistrat instanceof Administrator) {
      System.out.println(" ! nu sunt disponibile informatiile despre admin");
      return;
    }
    ((MembruInregistrat) membruInregistrat).afiseazaInformatii();
  }

  public void exportaInfoInCSv() {
    try {
      Biblioteca.getInstance().exportaToCsv();
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }
  }

  public void refuzaSolicitare(MembruNeinregistrat membru) {
    Biblioteca.getInstance().refuzaSolicitare(membru);
    SerializareDate.save(Biblioteca.getInstance().getFisierSerializare());
  }

  @Override
  public boolean esteEligibilSaImprumute() {
    for (Exemplar e : cartiImprumutate) {
      if (e.getImprumut().isTermenDepasit()) {
        System.out.println(" ! Carti nereturnate la timp");
        return false;
      }
    }
    if (cartiImprumutate.size() > 2) {
      System.out.println(" ! 3 carti imprumutate");
      return false;
    }
    return true;
  }

  private Exemplar getExemplarImprumutatById(String idExemplar) {
    Exemplar exemplar = null;
    for (Exemplar e : cartiImprumutate) {
      if (e.getIdUnic().equals(idExemplar)) {
        exemplar = e;
      }
    }
    return exemplar;
  }

  public ArrayList<Exemplar> getCartiImprumutate() {
    return cartiImprumutate;
  }

  public void imprumutaCartePrinIdExemplar(String username, String titluCarte, String autorCarte, String idExemplar2) {
    boolean facut = false;
    UtilizatorSimplu membru = Biblioteca.getInstance().getMembruInregistratByNumeUtilizator(username);
    Carte carte = Biblioteca.getInstance().getCarteDupaTitluSiAutor(titluCarte, autorCarte);
    if (carte == null) {
      System.out.println(" ! nu exista cartea");
      return;
    }
    for (Exemplar e : carte.getExemplare()) {
      if (e.getIdUnic().equals(idExemplar2)) {
        Exemplar exemplarDeImprumutat = e;
        facut = true;
        if (membru instanceof MembruInregistrat) {
          if (membru.esteEligibilSaImprumute()) {
            ((MembruInregistrat) membru).imprumutaCarte(exemplarDeImprumutat);
          }
        } else {
          if (membru.esteEligibilSaImprumute()) {
            ((Administrator) membru).imprumutaCartePtAdmin(exemplarDeImprumutat);
          }

        }

        SerializareDate.save(Biblioteca.getInstance().getFisierSerializare());

      }
    }
    if (!facut) {
      System.out.println(" ! nu exista exemplar");
      return;
    } else {
      System.out.println(" ! cartea a fost imprumutat");
    }

  }

}
